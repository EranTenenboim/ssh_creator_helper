name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        python -m pytest tests/ -v --cov=ssh_auth_manager --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
    
    - name: Security scan with bandit
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  shell-script-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install shellcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
    
    - name: Run shellcheck
      run: |
        shellcheck ssh_auth_manager.sh
    
    - name: Test script syntax
      run: |
        bash -n ssh_auth_manager.sh
    
    - name: Test script with dry run
      run: |
        # Test that the script doesn't crash on startup
        timeout 10s bash ssh_auth_manager.sh --help || true

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, security, shell-script-test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up test environment
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-server openssh-client
    
    - name: Start SSH service
      run: |
        sudo systemctl start ssh
        sudo systemctl enable ssh
    
    - name: Create test user
      run: |
        sudo useradd -m -s /bin/bash testuser
        sudo mkdir -p /home/testuser/.ssh
        sudo chown testuser:testuser /home/testuser/.ssh
        sudo chmod 700 /home/testuser/.ssh
    
    - name: Test SSH key creation (dry run)
      run: |
        # Test the script without actually creating keys
        echo "Testing SSH key creation functionality..."
        # This would be a more comprehensive integration test
        # For now, we'll just verify the script can be imported and basic functions work
        python3 -c "
        import sys
        sys.path.append('.')
        # Test basic script structure
        with open('ssh_auth_manager.sh', 'r') as f:
            content = f.read()
            assert 'create_ssh_key' in content
            assert 'test_ssh_connection' in content
            assert 'force_key_auth' in content
        print('Script structure validation passed')
        "
    
    - name: Cleanup
      if: always()
      run: |
        sudo userdel -r testuser || true

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security, shell-script-test, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Create release archive
      run: |
        tar -czf ssh_creator_helper.tar.gz ssh_auth_manager.sh README.md
        zip -r ssh_creator_helper.zip ssh_auth_manager.sh README.md
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ssh-creator-helper-release
        path: |
          ssh_creator_helper.tar.gz
          ssh_creator_helper.zip
